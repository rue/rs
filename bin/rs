#!/usr/bin/env ruby
#
# The 'executable' rs program.
#
# == Copyright
# Copyright (c) 2005-2010 Eero Saynatkari, all rights reserved.
#
# == Licence
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions, the following disclaimer and
#   attribution to the original authors.
#
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions, the following disclaimer and
#   attribution to the original authors in the documentation and/or
#   other materials provided with the distribution.
#
# - The names of the authors may not be used to endorse or promote
#   products derived from this software without specific prior
#   written permission.
#
# == Disclaimer
# This software is provided "as is" and without any express or
# implied warranties, including, without limitation, the implied
# warranties of merchantability and fitness for a particular purpose.
# Authors are not responsible for any damages, direct or indirect.


# We might need the files in development
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), "..", "lib")


# System

# Project
require "rs/eval"
require "rs/ui"


# TODO: Yeah...ugh. --rue
#
RS.start {|rs|

  # Minor configulabulous
  config = rs.main.send(:rs).config

  config.default_prompt      = lambda { "#{Dir.pwd} rs> " }
  config.continuation_prompt = lambda { "#{Dir.pwd} ..> " }


  RS::UI.new {|ui|

    ui.on_SIGINT {
      @earlier_incomplete = nil
      ui.puts ""
      ui.prompt = config.default_prompt
    }

    ui.on_input {|line|
      next if line.empty?

      if @earlier_incomplete
        line = @earlier_incomplete + line
        @earlier_incomplete = nil
      end

      begin
        output = rs.execute line

        ui.puts "=> #{output.inspect}"
        ui.prompt = config.default_prompt

      rescue RS::IncompleteExpression
        @earlier_incomplete = line + "\n"      # Only allow where newlines appropriate.
        ui.prompt = config.continuation_prompt

      rescue LocalJumpError => e    # next and redo in 1.8
        output = e
      end
    }

    ui.prompt = config.default_prompt
    ui.run
  }

}

